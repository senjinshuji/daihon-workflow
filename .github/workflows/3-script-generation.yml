name: 3. 台本生成とフィルタリング

on:
  workflow_dispatch:
    inputs:
      product_name:
        description: '商品名'
        required: true
        type: string
      loop_number:
        description: 'ループ回数（自動インクリメント）'
        required: false
        type: string
        default: '1'

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  # Step 1: 台本生成（並列実行）
  generate_scripts_writer1:
    uses: ./.github/workflows/module-generate-scripts-writer1.yml
    with:
      product_name: ${{ inputs.product_name }}
      loop_number: ${{ inputs.loop_number }}
    secrets:
      anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

  generate_scripts_writer2:
    uses: ./.github/workflows/module-generate-scripts-writer2.yml
    with:
      product_name: ${{ inputs.product_name }}
      loop_number: ${{ inputs.loop_number }}
    secrets:
      anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

  generate_scripts_writer3:
    uses: ./.github/workflows/module-generate-scripts-writer3.yml
    with:
      product_name: ${{ inputs.product_name }}
      loop_number: ${{ inputs.loop_number }}
    secrets:
      anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

  # Step 2: 台本評価とフィルタリング
  evaluate_and_filter:
    needs: [generate_scripts_writer1, generate_scripts_writer2, generate_scripts_writer3]
    uses: ./.github/workflows/module-evaluate-and-filter.yml
    with:
      product_name: ${{ inputs.product_name }}
      loop_number: ${{ inputs.loop_number }}
    secrets:
      anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

  # Step 3: Writer調整（必要時のみ）
  adjust_writers:
    needs: evaluate_and_filter
    if: needs.evaluate_and_filter.outputs.writer_adjustment_needed == 'true'
    runs-on: ubuntu-latest
    outputs:
      adjustment_completed: ${{ steps.adjust.outputs.completed }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm install -g @anthropic-ai/claude-code
      
      - id: adjust
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "🔧 Adjusting writer personalities for ${{ inputs.product_name }}..."
          
          # 外部プロンプトファイルの読み込み
          if [ -f ".github/prompts/generation/generate_writers.txt" ]; then
            PROMPT=$(cat .github/prompts/generation/generate_writers.txt)
          else
            echo "::error::Prompt file not found: .github/prompts/generation/generate_writers.txt"
            exit 1
          fi
          
          # Writer調整指示を追加
          cat << 'EOF' > writer_adjustment_instruction.txt
          
          ## Writer調整指示
          
          前回生成されたWriterの台本評価結果を参考に、承認台本数が不足しているWriterの人格を調整してください：
          
          ### 評価結果参照
          - {PRODUCT_NAME}/evaluations/averaged_script_evaluation.json（平均評価結果）
          - {PRODUCT_NAME}/artifacts/filtering_results.json（フィルタリング結果）
          
          ### 調整方針
          1. **承認台本数が3本未満のWriter**を特定
          2. **評価が低かった要因**を分析（criteria.jsonの各項目スコア）
          3. **Writer人格の問題点**を特定（キャラクター設定・口調・アプローチ方法）
          4. **ターゲット深層心理との整合性**を再検証
          5. **改善されたWriter人格**を再生成
          
          ### 調整内容
          - **キャラクター設定**: より信頼性・共感性の高い人物像
          - **口調・言葉遣い**: ターゲットに響く表現方法
          - **訴求アプローチ**: 深層心理により効果的な手法
          - **戦略パッケージ**: WHO-FMT-USP-コンセプト-キャッチコピーの最適化
          
          既存のWriter定義ファイルを上書きして、改善されたWriter人格を生成してください。
          EOF
          
          ADJUSTMENT_INSTRUCTION=$(cat writer_adjustment_instruction.txt)
          FULL_PROMPT="$PROMPT\n\n$ADJUSTMENT_INSTRUCTION"
          FULL_PROMPT="${FULL_PROMPT//\{PRODUCT_NAME\}/${{ inputs.product_name }}}"
          
          npx @anthropic-ai/claude-code \
            --allowedTools "Read,Write" \
            --max-turns 60 \
            --verbose \
            --permission-mode "acceptEdits" \
            -p "$FULL_PROMPT"
          
          # 完了確認
          if [ -f "${{ inputs.product_name }}/writers/writer1.md" ] && \
             [ -f "${{ inputs.product_name }}/writers/writer2.md" ] && \
             [ -f "${{ inputs.product_name }}/writers/writer3.md" ]; then
            echo "completed=true" >> $GITHUB_OUTPUT
            echo "✅ Writer adjustment completed"
          else
            echo "completed=false" >> $GITHUB_OUTPUT
            echo "❌ Writer adjustment failed"
          fi

  # Step 4: 再実行判定（Writer調整後）
  trigger_retry:
    needs: [evaluate_and_filter, adjust_writers]
    if: needs.evaluate_and_filter.outputs.writer_adjustment_needed == 'true' && needs.adjust_writers.outputs.adjustment_completed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Check loop limit and trigger retry
        run: |
          echo "🔄 Checking loop limit and triggering retry if needed..."
          
          # ループ番号をインクリメント
          NEXT_LOOP=$((${{ inputs.loop_number }} + 1))
          echo "📈 Next loop number: $NEXT_LOOP"
          
          # 最大ループ数のチェック（デフォルト: 10回）
          MAX_LOOPS=10
          if [ $NEXT_LOOP -gt $MAX_LOOPS ]; then
            echo "⚠️ Maximum loop limit ($MAX_LOOPS) reached. Stopping iteration."
            echo "📊 Please check the approved scripts from all loops in the final report."
            exit 0
          fi
          
          echo "🚀 Triggering Phase 3 retry (Loop $NEXT_LOOP)..."
          
          # GitHub CLIを使用してワークフローを再実行
          gh workflow run "3-script-generation.yml" \
            -f product_name="${{ inputs.product_name }}" \
            -f loop_number="$NEXT_LOOP" \
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}

  # Step 5: 結果集計とコミット（常に実行）
  finalize:
    needs: [evaluate_and_filter, adjust_writers]
    if: always()  # 常に実行（エラー時も含む）
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts-temp
      
      - name: Organize artifacts into directory structure
        run: |
          echo "📁 Organizing Phase 3 artifacts for ${{ inputs.product_name }}..."
          
          # Create directory structure if not exists
          mkdir -p "${{ inputs.product_name }}/bulk_scripts/loop_${{ inputs.loop_number }}"
          mkdir -p "${{ inputs.product_name }}/evaluations"
          mkdir -p "${{ inputs.product_name }}/artifacts"
          mkdir -p "${{ inputs.product_name }}/approved_scripts/loop_${{ inputs.loop_number }}"
          
          # Move generated scripts - アーティファクト名を修正（ループ番号付き）
          for writer in 1 2 3; do
            # Writer生成スクリプトのアーティファクト名に合わせる（ループ番号付き）
            if [ -d "artifacts-temp/${{ inputs.product_name }}-scripts-writer${writer}-loop${{ inputs.loop_number }}" ]; then
              echo "Found writer${writer} scripts in artifacts-temp/${{ inputs.product_name }}-scripts-writer${writer}-loop${{ inputs.loop_number }}"
              cp -r artifacts-temp/${{ inputs.product_name }}-scripts-writer${writer}-loop${{ inputs.loop_number }}/* "${{ inputs.product_name }}/bulk_scripts/loop_${{ inputs.loop_number }}/" 2>/dev/null || true
            else
              echo "Warning: No scripts found for writer${writer} at artifacts-temp/${{ inputs.product_name }}-scripts-writer${writer}-loop${{ inputs.loop_number }}"
            fi
          done
          
          # Move evaluation results
          if [ -d "artifacts-temp/${{ inputs.product_name }}-evaluation-results" ]; then
            cp -r artifacts-temp/${{ inputs.product_name }}-evaluation-results/* "${{ inputs.product_name }}/evaluations/" 2>/dev/null || true
          fi
          
          # Move filtering results and approved scripts
          if [ -d "artifacts-temp/${{ inputs.product_name }}-filtering-results" ]; then
            # Debug: Show artifact structure
            echo "📁 Artifact structure:"
            ls -la "artifacts-temp/${{ inputs.product_name }}-filtering-results/"
            
            # Move filtering_results.json to artifacts
            if [ -f "artifacts-temp/${{ inputs.product_name }}-filtering-results/filtering_results.json" ]; then
              cp "artifacts-temp/${{ inputs.product_name }}-filtering-results/filtering_results.json" "${{ inputs.product_name }}/artifacts/" 2>/dev/null || true
            fi
            
            # Move approved scripts - check multiple possible locations
            echo "📝 Looking for approved scripts..."
            
            # Option 1: Scripts directly in artifact root
            SCRIPTS_FOUND=$(ls -1 "artifacts-temp/${{ inputs.product_name }}-filtering-results/"*.md 2>/dev/null | wc -l)
            if [ "$SCRIPTS_FOUND" -gt 0 ]; then
              echo "Found $SCRIPTS_FOUND scripts in artifact root"
              cp "artifacts-temp/${{ inputs.product_name }}-filtering-results/"*.md "${{ inputs.product_name }}/approved_scripts/loop_${{ inputs.loop_number }}/" 2>/dev/null || true
            fi
            
            # Option 2: Scripts in loop subdirectory
            if [ -d "artifacts-temp/${{ inputs.product_name }}-filtering-results/loop_${{ inputs.loop_number }}" ]; then
              echo "Found scripts in loop_${{ inputs.loop_number }} subdirectory"
              cp -r "artifacts-temp/${{ inputs.product_name }}-filtering-results/loop_${{ inputs.loop_number }}/"* "${{ inputs.product_name }}/approved_scripts/loop_${{ inputs.loop_number }}/" 2>/dev/null || true
            fi
            
            # Count approved scripts after copying
            if [ -d "${{ inputs.product_name }}/approved_scripts/loop_${{ inputs.loop_number }}" ]; then
              APPROVED_COUNT=$(ls -1 "${{ inputs.product_name }}/approved_scripts/loop_${{ inputs.loop_number }}/"*.md 2>/dev/null | wc -l)
              echo "✅ Total approved scripts in loop_${{ inputs.loop_number }}: $APPROVED_COUNT"
            else
              echo "⚠️ No approved scripts directory found"
            fi
          fi
          
          # Clean up temp directory
          rm -rf artifacts-temp
          
          # List created structure
          echo "📂 Phase 3 directory structure:"
          find "${{ inputs.product_name }}/bulk_scripts" -type f | head -10
          find "${{ inputs.product_name }}/evaluations" -type f | head -10
      
      - name: Commit Results
        run: |
          echo "💾 Preparing to commit results..."
          
          # Check what we have before committing
          echo "📂 Checking approved scripts:"
          if [ -d "${{ inputs.product_name }}/approved_scripts/loop_${{ inputs.loop_number }}" ]; then
            APPROVED_COUNT=$(ls -1 "${{ inputs.product_name }}/approved_scripts/loop_${{ inputs.loop_number }}/"*.md 2>/dev/null | wc -l)
            echo "✅ Found $APPROVED_COUNT approved scripts in loop_${{ inputs.loop_number }}"
            ls -la "${{ inputs.product_name }}/approved_scripts/loop_${{ inputs.loop_number }}/" | head -10
          else
            echo "⚠️ No approved scripts directory for loop_${{ inputs.loop_number }}"
          fi
          
          echo "📂 Checking bulk scripts:"
          if [ -d "${{ inputs.product_name }}/bulk_scripts/loop_${{ inputs.loop_number }}" ]; then
            BULK_COUNT=$(ls -1 "${{ inputs.product_name }}/bulk_scripts/loop_${{ inputs.loop_number }}/"*.md 2>/dev/null | wc -l)
            echo "✅ Found $BULK_COUNT bulk scripts in loop_${{ inputs.loop_number }}"
          fi
          
          # Git configuration
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add all changes
          git add -A
          
          # Create detailed commit message
          if [ -d "${{ inputs.product_name }}/approved_scripts/loop_${{ inputs.loop_number }}" ]; then
            APPROVED_COUNT=$(ls -1 "${{ inputs.product_name }}/approved_scripts/loop_${{ inputs.loop_number }}/"*.md 2>/dev/null | wc -l)
            git commit -m "📝 [${{ inputs.product_name }}] Loop ${{ inputs.loop_number }}: 台本生成完了 (承認: ${APPROVED_COUNT}本)" || {
              echo "No changes to commit"
            }
          else
            git commit -m "📝 [${{ inputs.product_name }}] Loop ${{ inputs.loop_number }}: 台本生成とフィルタリング完了" || {
              echo "No changes to commit"
            }
          fi
          
          git push || {
            echo "Nothing to push"
          }
      
      - name: Generate Final Report if completed
        if: needs.evaluate_and_filter.outputs.writer_adjustment_needed == 'false'
        run: |
          echo "📊 Generating final report for all loops..."
          pip install pandas numpy
          python .github/scripts/python/generate_final_report.py \
            --product-name "${{ inputs.product_name }}" \
            --output-dir "${{ inputs.product_name }}/reports"
      
      - name: Generate Summary
        run: |
          echo "## 📝 Phase 3 実行完了: 台本生成とフィルタリング (Loop ${{ inputs.loop_number }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 実行結果" >> $GITHUB_STEP_SUMMARY
          echo "- **ループ番号**: ${{ inputs.loop_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Writer1台本数**: ${{ needs.generate_scripts_writer1.outputs.scripts_generated }}本" >> $GITHUB_STEP_SUMMARY
          echo "- **Writer2台本数**: ${{ needs.generate_scripts_writer2.outputs.scripts_generated }}本" >> $GITHUB_STEP_SUMMARY
          echo "- **Writer3台本数**: ${{ needs.generate_scripts_writer3.outputs.scripts_generated }}本" >> $GITHUB_STEP_SUMMARY
          echo "- **承認台本数**: ${{ needs.evaluate_and_filter.outputs.approved_count }}本" >> $GITHUB_STEP_SUMMARY
          echo "- **承認率**: ${{ needs.evaluate_and_filter.outputs.approval_rate }}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Writer調整必要**: ${{ needs.evaluate_and_filter.outputs.writer_adjustment_needed }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.evaluate_and_filter.outputs.writer_adjustment_needed }}" = "false" ]; then
            echo "### 🎉 目標達成！" >> $GITHUB_STEP_SUMMARY
            echo "全てのWriterで3本以上の承認台本が生成されました。" >> $GITHUB_STEP_SUMMARY
            echo "最終レポートが生成されました: ${{ inputs.product_name }}/reports/approved_scripts_report.md" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "承認済み台本を確認して制作を開始してください。" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.evaluate_and_filter.outputs.writer_adjustment_needed }}" = "true" ]; then
            if [ "${{ needs.adjust_writers.outputs.adjustment_completed }}" = "true" ]; then
              NEXT_LOOP=$((${{ inputs.loop_number }} + 1))
              echo "### 🔄 Writer調整完了 - Loop $NEXT_LOOP を実行中" >> $GITHUB_STEP_SUMMARY
              echo "Writer人格を調整しました。次のループを開始しています。" >> $GITHUB_STEP_SUMMARY
            else
              echo "### ❌ Writer調整失敗" >> $GITHUB_STEP_SUMMARY
              echo "Writer調整に失敗しました。手動での確認が必要です。" >> $GITHUB_STEP_SUMMARY
            fi
          fi
